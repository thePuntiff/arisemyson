export async function hexToRgb(hex) {
    if (!hex || hex === undefined || hex === '') {
        return undefined;
    }
    const result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
    return result ? `${parseInt(result[1], 16)}, ${parseInt(result[2], 16)}, ${parseInt(result[3], 16)}` : undefined;
}
export async function rgbToHex(rgb) {
    if (!rgb) {
        return undefined;
    }
    const toHex = (rgb) => {
        if (!rgb) {
            return undefined;
        }
        return `#${rgb.map((v) => v.toString(16).padStart(2, '0')).join('')}`;
    };
    const extractRgb = (rgb) => {
        const match = rgb.match(/(\d+),\s*(\d+),\s*(\d+)/);
        if (!match) {
            return undefined;
        }
        return match.splice(1, 3).map((v) => Number(v));
    };
    return toHex(extractRgb(rgb));
}
