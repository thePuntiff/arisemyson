"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _require = require("path"),
    resolve = _require.resolve;

var md5File = require("md5-file");

var _require2 = require("gatsby-transformer-sharp/types"),
    DuotoneGradientType = _require2.DuotoneGradientType,
    ImageCropFocusType = _require2.ImageCropFocusType;

var _require3 = require("gatsby-plugin-sharp"),
    queueImageResizing = _require3.queueImageResizing;

var Debug = require("debug");

var fs = require("fs-extra");

var _require4 = require("gatsby/graphql"),
    GraphQLObjectType = _require4.GraphQLObjectType,
    GraphQLString = _require4.GraphQLString,
    GraphQLInt = _require4.GraphQLInt,
    GraphQLBoolean = _require4.GraphQLBoolean;

var sharp = require("sharp");

var _require5 = require("fs-extra"),
    ensureDir = _require5.ensureDir;

var generateSqip = require("./generate-sqip");

var debug = Debug("gatsby-transformer-sqip");
var SUPPORTED_NODES = ["ImageSharp", "ContentfulAsset"];

module.exports = /*#__PURE__*/function () {
  var _ref = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee(args) {
    var name;
    return _regenerator.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            name = args.type.name;

            if (SUPPORTED_NODES.includes(name)) {
              _context.next = 3;
              break;
            }

            return _context.abrupt("return", {});

          case 3:
            if (!(name === "ImageSharp")) {
              _context.next = 5;
              break;
            }

            return _context.abrupt("return", sqipSharp(args));

          case 5:
            if (!(name === "ContentfulAsset")) {
              _context.next = 7;
              break;
            }

            return _context.abrupt("return", sqipContentful(args));

          case 7:
            return _context.abrupt("return", {});

          case 8:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function (_x) {
    return _ref.apply(this, arguments);
  };
}();

function sqipSharp(_x2) {
  return _sqipSharp.apply(this, arguments);
}

function _sqipSharp() {
  _sqipSharp = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee3(_ref2) {
    var type, cache, getNodeAndSavePathDependency, store, program, cacheDir;
    return _regenerator.default.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            type = _ref2.type, cache = _ref2.cache, getNodeAndSavePathDependency = _ref2.getNodeAndSavePathDependency, store = _ref2.store;
            program = store.getState().program;
            cacheDir = resolve(program.directory + "/node_modules/.cache/gatsby-transformer-sqip/");
            _context3.next = 5;
            return ensureDir(cacheDir);

          case 5:
            return _context3.abrupt("return", {
              sqip: {
                type: new GraphQLObjectType({
                  name: "SqipSharp",
                  fields: {
                    svg: {
                      type: GraphQLString
                    },
                    dataURI: {
                      type: GraphQLString
                    }
                  }
                }),
                args: {
                  blur: {
                    type: GraphQLInt,
                    defaultValue: 1
                  },
                  numberOfPrimitives: {
                    type: GraphQLInt,
                    defaultValue: 10
                  },
                  mode: {
                    type: GraphQLInt,
                    defaultValue: 0
                  },
                  width: {
                    type: GraphQLInt,
                    defaultValue: 256
                  },
                  height: {
                    type: GraphQLInt
                  },
                  grayscale: {
                    type: GraphQLBoolean,
                    defaultValue: false
                  },
                  duotone: {
                    type: DuotoneGradientType,
                    defaultValue: false
                  },
                  cropFocus: {
                    type: ImageCropFocusType,
                    defaultValue: sharp.strategy.attention
                  },
                  rotate: {
                    type: GraphQLInt,
                    defaultValue: 0
                  }
                },
                resolve: function resolve(image, fieldArgs, context) {
                  return (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee2() {
                    var blur, numberOfPrimitives, mode, width, height, grayscale, duotone, cropFocus, rotate, sharpArgs, file, contentDigest, job, absolutePath;
                    return _regenerator.default.wrap(function _callee2$(_context2) {
                      while (1) {
                        switch (_context2.prev = _context2.next) {
                          case 0:
                            blur = fieldArgs.blur, numberOfPrimitives = fieldArgs.numberOfPrimitives, mode = fieldArgs.mode, width = fieldArgs.width, height = fieldArgs.height, grayscale = fieldArgs.grayscale, duotone = fieldArgs.duotone, cropFocus = fieldArgs.cropFocus, rotate = fieldArgs.rotate;
                            sharpArgs = {
                              width: width,
                              height: height,
                              grayscale: grayscale,
                              duotone: duotone,
                              cropFocus: cropFocus,
                              rotate: rotate
                            };
                            file = getNodeAndSavePathDependency(image.parent, context.path);
                            contentDigest = image.internal.contentDigest;
                            _context2.next = 6;
                            return queueImageResizing({
                              file: file,
                              args: sharpArgs
                            });

                          case 6:
                            job = _context2.sent;
                            _context2.next = 9;
                            return fs.exists(job.absolutePath);

                          case 9:
                            if (_context2.sent) {
                              _context2.next = 13;
                              break;
                            }

                            debug("Preparing " + file.name);
                            _context2.next = 13;
                            return job.finishedPromise;

                          case 13:
                            absolutePath = job.absolutePath;
                            return _context2.abrupt("return", generateSqip({
                              cache: cache,
                              cacheDir: cacheDir,
                              contentDigest: contentDigest,
                              absolutePath: absolutePath,
                              numberOfPrimitives: numberOfPrimitives,
                              blur: blur,
                              mode: mode
                            }));

                          case 15:
                          case "end":
                            return _context2.stop();
                        }
                      }
                    }, _callee2);
                  }))();
                }
              }
            });

          case 6:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));
  return _sqipSharp.apply(this, arguments);
}

function sqipContentful(_x3) {
  return _sqipContentful.apply(this, arguments);
}

function _sqipContentful() {
  _sqipContentful = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee5(_ref3) {
    var type, cache, store, _require6, _require6$schemes, ImageResizingBehavior, ImageCropFocusType, cacheImage, program, cacheDir;

    return _regenerator.default.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            type = _ref3.type, cache = _ref3.cache, store = _ref3.store;
            _require6 = require("gatsby-source-contentful"), _require6$schemes = _require6.schemes, ImageResizingBehavior = _require6$schemes.ImageResizingBehavior, ImageCropFocusType = _require6$schemes.ImageCropFocusType;
            cacheImage = require("gatsby-source-contentful/cache-image");
            program = store.getState().program;
            cacheDir = resolve(program.directory + "/node_modules/.cache/gatsby-transformer-sqip/");
            _context5.next = 7;
            return ensureDir(cacheDir);

          case 7:
            return _context5.abrupt("return", {
              sqip: {
                type: new GraphQLObjectType({
                  name: "SqipContentful",
                  fields: {
                    svg: {
                      type: GraphQLString
                    },
                    dataURI: {
                      type: GraphQLString
                    }
                  }
                }),
                args: {
                  blur: {
                    type: GraphQLInt,
                    defaultValue: 1
                  },
                  numberOfPrimitives: {
                    type: GraphQLInt,
                    defaultValue: 10
                  },
                  mode: {
                    type: GraphQLInt,
                    defaultValue: 0
                  },
                  width: {
                    type: GraphQLInt,
                    defaultValue: 256
                  },
                  height: {
                    type: GraphQLInt
                  },
                  resizingBehavior: {
                    type: ImageResizingBehavior
                  },
                  cropFocus: {
                    type: ImageCropFocusType,
                    defaultValue: null
                  },
                  background: {
                    type: GraphQLString,
                    defaultValue: null
                  }
                },
                resolve: function resolve(asset, fieldArgs, context) {
                  return (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee4() {
                    var contentType, blur, numberOfPrimitives, mode, resizingBehavior, cropFocus, background, width, height, aspectRatio, options, absolutePath, contentDigest;
                    return _regenerator.default.wrap(function _callee4$(_context4) {
                      while (1) {
                        switch (_context4.prev = _context4.next) {
                          case 0:
                            contentType = asset.file.contentType;

                            if (contentType.includes("image/")) {
                              _context4.next = 3;
                              break;
                            }

                            return _context4.abrupt("return", null);

                          case 3:
                            blur = fieldArgs.blur, numberOfPrimitives = fieldArgs.numberOfPrimitives, mode = fieldArgs.mode, resizingBehavior = fieldArgs.resizingBehavior, cropFocus = fieldArgs.cropFocus, background = fieldArgs.background;
                            width = fieldArgs.width, height = fieldArgs.height;

                            if (width && height) {
                              aspectRatio = height / width;
                              height = height * aspectRatio;
                            }

                            options = {
                              width: 256,
                              height: height,
                              resizingBehavior: resizingBehavior,
                              cropFocus: cropFocus,
                              background: background
                            };
                            _context4.next = 9;
                            return cacheImage(store, asset, options);

                          case 9:
                            absolutePath = _context4.sent;
                            _context4.next = 12;
                            return md5File(absolutePath);

                          case 12:
                            contentDigest = _context4.sent;
                            return _context4.abrupt("return", generateSqip({
                              cache: cache,
                              cacheDir: cacheDir,
                              contentDigest: contentDigest,
                              absolutePath: absolutePath,
                              numberOfPrimitives: numberOfPrimitives,
                              blur: blur,
                              mode: mode
                            }));

                          case 14:
                          case "end":
                            return _context4.stop();
                        }
                      }
                    }, _callee4);
                  }))();
                }
              }
            });

          case 8:
          case "end":
            return _context5.stop();
        }
      }
    }, _callee5);
  }));
  return _sqipContentful.apply(this, arguments);
}