{"version":3,"sources":["webpack:///./src/pages/index.js"],"names":["BlogIndex","render","siteMetadata","get","this","posts","years","Map","forEach","node","set","concat","title","description","type","siteUrl","className","Array","from","map","year","index","fields","slug","key","to","frontmatter","date","timeToRead","dangerouslySetInnerHTML","__html","excerpt","React","Component"],"mappings":"yMAOMA,E,kGACJC,OAAA,WACE,IAAMC,EAAeC,IAAIC,KAAM,gCACzBC,EAAQF,IAAIC,KAAM,sCAClBE,EAAQ,IAAIC,IAYlB,OAXAF,EAAMG,SAAQ,YAAe,IAAZC,EAAW,EAAXA,KACXH,EAAMH,IAAIA,IAAIM,EAAM,qBACtBH,EAAMI,IACJP,IAAIM,EAAM,oBACVH,EAAMH,IAAIA,IAAIM,EAAM,qBAAqBE,OAAOF,IAGlDH,EAAMI,IAAIP,IAAIM,EAAM,oBAAqB,CAACA,OAK5C,kBAAC,IAAD,CAAQG,MAAOV,EAAaU,MAAOC,YAAaX,EAAaW,aAC3D,kBAAC,IAAD,KACE,4BAAQC,KAAK,uBAAb,0GAIaZ,EAAaU,MAJ1B,2BAKYV,EAAaa,QALzB,mCAMoBb,EAAaW,YANjC,kBAUA,4BAAQC,KAAK,uBAAb,0GAIaZ,EAAaU,MAJ1B,2BAKYV,EAAaa,QALzB,mCAMoBb,EAAaW,YANjC,mBAUF,yBAAKG,UAAW,WACd,yBAAKA,UAAW,iBAAhB,SACCC,MAAMC,KAAKZ,GAAOa,KAAI,YAAoB,IAAlBC,EAAiB,KACxC,OADwC,KAC3BD,KAAI,SAACV,EAAMY,GACtB,IAAMT,EAAQT,IAAIM,EAAM,sBAAwBA,EAAKa,OAAOC,KAC5D,OACE,yBAAKC,IAAKf,EAAKa,OAAOC,MACT,IAAVF,GAAe,4BAAKD,GACrB,yBAAKJ,UAAW,OACd,yBAAKA,UAAW,UACd,kBAAC,OAAD,CAAMS,GAAIhB,EAAKa,OAAOC,MAAOX,GAD/B,MACgD,IAC9C,gCAASH,EAAKiB,YAAYC,OAE5B,yBAAKX,UAAW,+BACd,0BAAMA,UAAW,gBAAjB,IACIP,EAAKmB,WADT,eAKJ,6BACE,uBACEZ,UAAW,uBACXa,wBAAyB,CAAEC,OAAQrB,EAAKsB,sB,GA7DtCC,IAAMC,WA0EfjC","file":"component---src-pages-index-js-96f270c4830e08ec96f4.js","sourcesContent":["import React from 'react'\nimport { graphql, Link } from 'gatsby'\nimport get from 'lodash/get'\nimport Helmet from 'react-helmet'\n\nimport Layout from '../components/Layout'\n\nclass BlogIndex extends React.Component {\n  render() {\n    const siteMetadata = get(this, 'props.data.site.siteMetadata')\n    const posts = get(this, 'props.data.allMarkdownRemark.edges')\n    const years = new Map()\n    posts.forEach(({ node }) => {\n      if (years.get(get(node, 'frontmatter.year'))) {\n        years.set(\n          get(node, 'frontmatter.year'),\n          years.get(get(node, 'frontmatter.year')).concat(node)\n        )\n      } else {\n        years.set(get(node, 'frontmatter.year'), [node])\n      }\n    })\n\n    return (\n      <Layout title={siteMetadata.title} description={siteMetadata.description}>\n        <Helmet>\n          <script type=\"application/ld+json\">\n            {`{\n            \"@context\": \"http://schema.org\",\n            \"@type\": \"WebSite\",\n            \"name\": \"${siteMetadata.title}\",\n            \"url\": \"${siteMetadata.siteUrl}\",\n            \"description\": \"${siteMetadata.description}\"\n          }`}\n          </script>\n\n          <script type=\"application/ld+json\">\n            {`{\n            \"@context\": \"http://schema.org\",\n            \"@type\": \"WebPage\",\n            \"name\": \"${siteMetadata.title}\",\n            \"url\": \"${siteMetadata.siteUrl}\",\n            \"description\": \"${siteMetadata.description}\"\n          }`}\n          </script>\n        </Helmet>\n        <div className={'content'}>\n          <div className={'section-title'}>Posts</div>\n          {Array.from(years).map(([year, nodes]) => {\n            return nodes.map((node, index) => {\n              const title = get(node, 'frontmatter.title') || node.fields.slug\n              return (\n                <div key={node.fields.slug}>\n                  {index === 0 && <h3>{year}</h3>}\n                  <div className={'row'}>\n                    <div className={'column'}>\n                      <Link to={node.fields.slug}>{title}</Link> | {' '}\n                      <strong>{node.frontmatter.date}</strong>\n                    </div>\n                    <div className={'column column-20 text-right'}>\n                      <span className={'time-to-read'}>\n                        ~{node.timeToRead} min read\n                      </span>\n                    </div>\n                  </div>\n                  <div>\n                    <p\n                      className={'summary text-justify'}\n                      dangerouslySetInnerHTML={{ __html: node.excerpt }}\n                    />\n                  </div>\n                </div>\n              )\n            })\n          })}\n        </div>\n      </Layout>\n    )\n  }\n}\n\nexport default BlogIndex\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      buildTime(formatString: \"DD.MM.YYYY\")\n      siteMetadata {\n        title\n        description\n        siteUrl\n      }\n    }\n    allMarkdownRemark(\n      filter: { frontmatter: { type: { eq: \"post\" } } }\n      sort: { fields: [frontmatter___date], order: DESC }\n    ) {\n      edges {\n        node {\n          timeToRead\n          excerpt(pruneLength: 280)\n          fields {\n            slug\n          }\n          frontmatter {\n            year: date(formatString: \"YYYY\")\n            date(formatString: \"MMM DD\")\n            title\n            type\n            tags\n            categories\n          }\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}